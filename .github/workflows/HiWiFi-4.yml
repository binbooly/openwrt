#
# GitHub Actions 的工作流语法：
# https://docs.github.com/zh/actions/writing-workflows/workflow-syntax-for-github-actions
#
# 本文件基于如下文件修改所得：
# https://github.com/coolsnowwolf/lede/blob/master/.github/workflows/openwrt-ci.yml
# https://github.com/esirplayground/AutoBuild-OpenWrt/blob/master/.github/workflows/Build_OP_Nanopi_R4S.yml
# 
# 适用于极路由4(HC5692)。
#

# 工作流名称，当前仓库内必须唯一。
name: OpenWrt-HiWiFi.4

# 工作流触发器，可同时指定多个事件。更多事件介绍：https://docs.github.com/zh/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows。
on:
  # 当工作流文件存在于默认分支上时才允许触发此事件。
  repository_dispatch:
  # 手动运行工作流程事件。
  workflow_dispatch:

permissions:
  contents: read

# 作业列表。一个工作流内可以有多个作业，多个作业默认并行运行。
jobs:

  build_openwrt:

    name: Build OpenWrt Firmware

    # 运行当前作业的计算机（操作系统）类型。
    runs-on: ubuntu-22.04

    # 一个作业可以有多个步骤，步骤会顺序执行，但每个步骤都是独立进程。
    steps:
      - name: Check Server Performance
        # 脚本命令运行列表。
        run: |
          echo "-------------------------- CPU信息 --------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "-------------------------- 内存信息 --------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "-------------------------- 硬盘信息 --------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Space cleanup and Initialization environment
        # 为当前步骤的进程初始化环境变量，步骤完成后进程将退出，环境变量也同时清除。
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout OpenWrt
        # 从 GitHub Marketplace 调用 v4.2.2 版本的 checkout Action 对当前仓库执行 checkout 操作，详见：https://github.com/marketplace/actions/checkout。
        uses: actions/checkout@v4.2.2

      - name: Clone Source
        run: |
          sudo mkdir /opt/openwrt
          sudo chown -R runner:runner /opt/openwrt
          git clone https://github.com/coolsnowwolf/lede /opt/openwrt

      - name: Update feeds
        run: |
          cd /opt/openwrt
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          # echo -e "src-git kenzo https://github.com/kenzok8/openwrt-packages\n" >> ./feeds.conf.default
          # echo -e "src-git small https://github.com/kenzok8/small\n" >> ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configuration OpenWrt
        run: |
          cd /opt/openwrt
          cp -f "${GITHUB_WORKSPACE}/HiWiFi-4/.config" ".config"
          cp -f "${GITHUB_WORKSPACE}/HiWiFi-4/luci" "feeds/luci/modules/luci-base/root/etc/config/luci"

      - name: Download packages
        run: |
          cd /opt/openwrt
          make -j$(nproc) download V=s

      - name: Compile firmware
        run: |
          cd /opt/openwrt
          make -j$(nproc) || make -j1 V=s
          echo "--------------------------"
          echo "Space usage:"
          echo "--------------------------"
          df -h
          echo "--------------------------"
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p /opt/openwrt/artifact/package
          mkdir -p /opt/openwrt/artifact/buildinfo
          rm -rf $(find /opt/openwrt/bin/targets/ -type d -name "packages")
          cp -rf $(find /opt/openwrt/bin/packages/ -type f -name "*.ipk") /opt/openwrt/artifact/package/
          cp -rf $(find /opt/openwrt/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") /opt/openwrt/artifact/buildinfo/

      - name: Upload buildinfo
        # 从 GitHub Marketplace 调用 v4.6.2 版本的 upload-artifact Action 将指定的文件上传至成品列表中供下载，详见：https://github.com/marketplace/actions/upload-a-build-artifact。
        uses: actions/upload-artifact@v4.6.2
        with:
          name: OpenWrt_buildinfo
          path: /opt/openwrt/artifact/buildinfo/

      - name: Upload package
        uses: actions/upload-artifact@v4.6.2
        with:
          name: OpenWrt_package
          path: /opt/openwrt/artifact/package/

      - name: Upload firmware
        uses: actions/upload-artifact@v4.6.2
        with:
          name: OpenWrt_firmware
          path: /opt/openwrt/bin/targets/
